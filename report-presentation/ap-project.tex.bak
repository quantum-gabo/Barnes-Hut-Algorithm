\documentclass[conference]{IEEEtran}
\IEEEoverridecommandlockouts
% The preceding line is only needed to identify funding in the first footnote. If that is unneeded, please comment it out.
\usepackage{cite}
\usepackage{amsmath,amssymb,amsfonts}
\usepackage{algorithmic}
\usepackage{graphicx}
\usepackage{textcomp}
\usepackage{xcolor}
\usepackage{algorithm}
\usepackage{algorithmic}

\usepackage{listings}

% Define C++ style
\lstdefinestyle{cppStyle}{
  language=C++,
  basicstyle=\ttfamily\small,
  keywordstyle=\color{blue},
  commentstyle=\color{gray},
  stringstyle=\color{red},
  numbers=left,
  numberstyle=\tiny\color{gray},
  stepnumber=1,
  numbersep=5pt,
  tabsize=2,
  showspaces=false,
  showstringspaces=false,
  breaklines=true,
  frame=single,
  captionpos=b
}

\def\BibTeX{{\rm B\kern-.05em{\sc i\kern-.025em b}\kern-.08em
    T\kern-.1667em\lower.7ex\hbox{E}\kern-.125emX}}
\begin{document}

\title{The Barnes-Hut Algorithm: An N-Body Simulator\\
}

\author{\IEEEauthorblockN{1\textsuperscript{st} Gabriel Balarezo .B}
\IEEEauthorblockA{\textit{School of Physical Sciences and Nanotechnology} \\
\textit{Yachay Tech University}\\
Urcuqui, Ecuador \\
juan.balarezo@yachaytech.edu.ec}
}

\maketitle

\begin{abstract}
  The N-body problem, which simulates the evolution of a system of particles interacting through a gravitational field, holds significant computational challenges due to its inherent complexity. In this project, we implement and compare two approaches to N-body simulations: a brute force method and the Barnes-Hut algorithm. The brute force method computes pairwise gravitational forces between all particles (bodies), which results in an $\mathcal{O}(N^2)$ time complexity--ensuring accuracy but poorly scaling with large systems. Conversely, the Barnes-Hut algorithm leverages a hierarchical tree structure-- quadtree for 2D and octree for 3D--to approximate distant forces, achieving a time complexity of $\mathcal{O}(N\log N)$ and improving performance for large-scale simulations. Both methods were implemented in \texttt{C++}, using Object Oriented Programming (OOP), \texttt{SDL} library for graphics 
  rendering and \texttt{CMake} for project management. Preliminary results feature the trade-offs between computational cost and precision, with brute force excelling in small systems and Barnes-Hut outperforming it as N increases. This work details the algorithms, their implementations, and performance comparisons, offering insights into their practical applications and limitations. Future improvements, such as parallelisation, could further refine the performance of these algorithms. 
\end{abstract}

\begin{IEEEkeywords}
N-body simulation, Barnes-Hut algorithm, brute force method, computational physics, gravitational interactions.
\end{IEEEkeywords}

\section{Introduction}
In physics, the N-body problem refers to the task of predicting the individual motions of a group of $N$ interacting particles (bodies)---such as planets, stars, or subatomic particles---under the influence of mutual forces, typically gravity. Given a set of initial conditions (positions, velocities) and the laws governing the interactions (e.g., Newton's law of gravitation), we are to determine the future state of the system. Applications of the N-body problem span various fields, including astrophysics\cite{10.1093/mnras/staa1915} \cite{cuda-nbody} (e.g., simulating galaxy formation), molecular dynamics\cite{MAKSIMENKO2022110962} (e.g., simulating protein folding), and cosmology\cite{klypin2017methods} (e.g., simulating large-scale structure formation). 

For the purposes of this report, we shall focus on the gravitational N-body problem. Let a number, $N$, of particles interact classically through Newton's law of gravitation. Then, the equations of motion for the $i$-th particle are given by\cite{HEGGIE2006575}:

\begin{equation}
  \frac{d^2\mathbf{r}_i}{dt^2} = -\sum_{j=1,j\neq i}^{N} \frac{G m_j (\mathbf{r}_i - \mathbf{r}_j)}{|\mathbf{r}_i - \mathbf{r}_j|^3}
\end{equation}

where $\mathbf{r}_i$ is the position vector of the $i$-th particle, $G$ is the universal constant of gravitation, and $m_i$ is the mass of the $i$-th particle. For $N=1$ and $N=2$ the equations can be solved analytically. On the other hand, for $N\geq 3$, there is no general analytical solution. Thereby, numerical methods are required to approximate a solution.

In this context, some numerical methods for solving the N-body problem include\cite{heggie2005classical}:
\begin{itemize}
  \item \textbf{Direct $N$-body calculations}: These minimise the number of simplifying assumptions, but are rather computationally expensive, with a time complexity of $\mathcal{O}(N^2)$. Therefore, they are suitable for small systems.
  \item \textbf{Tree code methods}: Such as a Barnes-Hut simulation\cite{barnes1986hierarchical}, are hierarchical methods which shorten the calculation of forces by grouping distant masses. This allows for a reduction in complexity to $\mathcal{O}(N\log N)$, making them suitable for larger systems.
  \item \textbf{Fast multipole methods}: These are more advanced techniques that further reduce the computational cost by exploiting series expansions of distant interactions. It is claimed that this approximation achieves a time complexity of $\mathcal{O}(N)$.
\end{itemize}

Our final goal is to implement a N-body simulator using both the brute force method and the Barnes-Hut algorithm using our knowledge of \texttt{C++} from our Advanced Programming course. 

%This report is structured as follows: Section \ref{sec:brute_force} describes the implementation of the brute force method including the approximations and assumptions made and the pseudo code for the simulation. Section \ref{sec:barnes-hut} introduces the Barnes-Hut algorithm as an optimised alternative to the direct method, and describes its core concept. Finally, Section \ref{sec:results} presents the preliminary results of our direct method simulation.

%Section \ref{sec:bh_algorithm} elaborates on the Barnes-Hut algorithm, including the quadtree construction, center of mass approximation, and the $\theta$ criterion. In Section \ref{sec:implementation}, we discuss the implementation details of both methods, including some details on the software used, challenges encountered, and workarounds. Section \ref{sec:results} presents the results of our simulations, including performance comparisons and visualisations. Finally, Section \ref{sec:conclusions} summarises our findings and discusses future work.

\section{Brute Force Method}\label{sec:brute_force}
Let's consider two interacting bodies with masses $m_1$ and $m_2$, and positions $\mathbf{r}_1$ and $\mathbf{r}_2$ respectively , see Figure \ref{fig:two-body}. The gravitational force acting on $m_1$ due to $m_2$ is in the direction of $\vec{r}_2 - \vec{r}_1 = \vec{r}_{12}$, and is given by:

\begin{equation}
  \mathbf{F}_{12} = -\frac{G m_1 m_2}{|\mathbf{r}_{12}|^3} \mathbf{r}_{12}
\end{equation}
 
\begin{figure}[h]
  \centering
  \includegraphics[width=0.3\textwidth]{./two-body.png}
  \caption{Brute force method for two interacting bodies.}
  \label{fig:two-body}
\end{figure}

 Since the gravitational force is a symmetric interaction, the force acting on $m_2$ due to $m_1$ is given by:
\begin{equation}
  \mathbf{F}_{21} = -\mathbf{F}_{12}
\end{equation}

Therefore, the total force $\mathbf{F}_i$ on body $i$, due to its interactions with the other $N-1$ bodies is obtained by summing all the interactions: 

\begin{equation}
  m_i \frac{d^2\mathbf{r}_i}{dt^2} = \sum_{j=1,j\neq i}^{N} \mathbf{F}_{ij} = -\sum_{j=1,j\neq i}^{N} \frac{G m_i m_j}{|\mathbf{r}_{ij}|^3} \mathbf{r}_{ij}
\end{equation}
and its equation of motion is given by:
\begin{equation}
  \frac{d^2\mathbf{r}_i}{dt^2} = -\sum_{j=1,j\neq i}^{N} \frac{G m_j (\mathbf{r}_i - \mathbf{r}_j)}{|\mathbf{r}_i - \mathbf{r}_j|^3}
\end{equation}

There is a singularity if $|\mathbf{r}_i - \mathbf{r}_j|=0$, which occurs when two bodies are at the same position. To avoid this, the denominator is can be replaced by $(|\mathbf{r}_i - \mathbf{r}_j|^2 + \epsilon^2)^{3/2}$, where $\epsilon$ is a small constant, the softening parameter.


As mentioned earlier, the brute force method computes pairwise gravitational forces between all bodies, it is $N - 1$ calculations per body, and $N(N-1)$ calculations in total. We can reduce this to half by leveraging the symmetry of the gravitational force, which ultimately results in a total of $N(N-1)/2$ calculations.

\subsection{Initial Conditions and Time Integration}
Equation (5) is a second-order ordinary differential equation (ODE). Since we are working in 2D, the overall system consists of $2N$ second-order ODEs, and hence, require $4N$ initial conditions. These initial conditions include the two Cartesian components of position $\mathbf{r}_i$ and the two components of the velocity $\mathbf{\dot{r}}_i$ of each one of the $N$ particles.

On the other hand, to simulate the system over time, we need to integrate the equations of motion so we can predict the state of the system at time $t+\Delta t$, given its state at time $t$. A variety of numerical integrators can be used, such as Euler, Verlet, or Runge-Kutta. Since we are simulating a physical system with many interacting particles, it is crucial to use a stable integrator. For this reason, we choose Verlet integration, as it is numerically stable, time-reversible, and conservative, making it well-suited for simulations of this nature\cite{book:8675}. The Verlet integration is given by the following expressions: 

\begin{equation}
  \mathbf{r}_i(t+\Delta t) = 2\mathbf{r}_i(t) - \mathbf{r}_i(t-\Delta t) + \mathbf{a}_i(t) \Delta t^2 + \mathcal{O}(\Delta t^4)
\end{equation}
\begin{equation}
  \mathbf{\dot{r}}_i(t+\Delta t) = \frac{\mathbf{r}_i(t+\Delta t) - \mathbf{r}_i(t)}{\Delta t} + \mathcal{O}(\Delta)
\end{equation}
where $\mathbf{a}_i(t)$ is the acceleration of body $i$ at time $t$, and $\Delta t$ is the time step. The first equation updates the position of the body, while the second equation updates its velocity. The Verlet integration scheme is a symplectic integrator, which preserves the Hamiltonian structure of the equations of motion, making it suitable for long-term simulations of conservative systems.

Nevertheless, we must note that at the start of the Verlet integration, say at step $n=1$, time $t=1 = \Delta t$, in order to compute $\mathbf{r}_i(t=2)$ we need to know $\mathbf{r}_i(t=1)$ and $\mathbf{r}_i(t=1)$. This could represent a problem, because the only initials conditions we have are $\mathbf{r}_i(t=0)$ and $\mathbf{\dot{r}}_i(t=0)$. However, we know the value of $\mathbf{\ddot{r}}_i(t=0)$, and a suitable approximation for the position at the first time step can be obtained using the Taylor polynomial of degree two: 
\begin{equation}
  \mathbf{r}_i(t=1) = \mathbf{r}_i(t=0) + \mathbf{\dot{r}}_i(t=0) \Delta t + \frac{1}{2} \mathbf{\ddot{r}}_i(t=0) \Delta t^2
\end{equation}

This approximation is valid for small time steps, and it allows us to compute the initial position at the first time step.

\subsection{Pseudo Code}
Now that we have all the necessary equations, we can write the pseudo code for the brute force method. The algorithm consists of the following steps:

\begin{algorithm}[H]
  \caption{\textbf{Brute Force Method}}
  \label{alg:brute_force}
  \begin{algorithmic}[1]
    \STATE Initialize positions and velocities of $N$ bodies
    \STATE Set time step $\Delta t$
    \WHILE{simulation not finished}
      \FOR{$i=1$ to $N$}
        \STATE Compute acceleration $\mathbf{a}_i(t)$ using Equation (5)
        \STATE Update position $\mathbf{r}_i(t+\Delta t)$ using Equation (6)
        \STATE Update velocity $\mathbf{\dot{r}}_i(t+\Delta t)$ using Equation (7)
      \ENDFOR
    \ENDWHILE
\end{algorithmic}
\end{algorithm}

\section{The Barnes-Hut Algorithm}\label{sec:barnes-hut}
As previously mentioned, the direct method scales poorly with large systems, and hence, we need to find a more efficient way to compute the forces acting on each body. The Barnes-Hut algorithm is an approximation algorithm for performing an N-body simulation with a time complexity of $\mathcal{O}(N\log N)$. The main idea is to approximate long-range forces by replacing a group of distant bodies with their center of mass. In exchange for a small loss of precision, this scheme significantly speeds up calculations. 

\subsection{Quad Tree Construction}
Figure \ref{fig:quadtree} shows the quad tree construction. The steps can be summarised as follows:

\begin{itemize}
  \item The simulation space is divided into four quadrants, each represented by a node in the tree. Each node contains a list of bodies that are located within its boundaries.
  \item If a node contains more than one body, it is subdivided into four child nodes, and the bodies are distributed among them.
  \item This process continues recursively until each node contains at most one body or reaches a predefined maximum depth.
\end{itemize}

\begin{figure}[h]
  \centering
  \includegraphics[width=0.4\textwidth]{./barnes-hut.png}
  \caption{Quadtree construction. Each node represents a quadrant and stores the center of mass of its child nodes and the position of the center of mass.}
  \label{fig:quadtree}
\end{figure}

Additionally, we store the center of mass of each node computed as follows: 
\begin{equation}
  \mathbf{r}_{cm} = \frac{\sum_{i=1}^{N} m_i \mathbf{r}_i}{\sum_{i=1}^{N} m_i}
\end{equation}
where $\mathbf{r}_{cm}$ is the position of the center of mass, $m_i$ is the mass of body $i$, and $\mathbf{r}_i$ is its position. Moreover, we also need to compute the total mass of the node, which is given by:
\begin{equation}
  M_{cm} = \sum_{i=1}^{N} m_i
\end{equation}
where $M_{cm}$ is the total mass of the node.

Finally, we need to define a condition such that nearby interactions are computed with the direct method, but approximates long-range interactions. This condition is called the $\theta$ criterion, and is defined as follows: 
\begin{equation}
  \frac{d}{D} < \theta 
\end{equation}
where $d$ is the distance between the body and the center of mass of the node, $D$ is the size of the node, and $\theta$ is a parameter that determines the accuracy of the approximation. If the condition is satisfied, we can use the center of mass to compute the force acting on the body. Otherwise, we need to compute the forces acting on each body in the node using the direct method.

%\textbf{The implementation is on an early stage, so there is room for further improvement and optimisation. Here I will only include the header files to keep the report as clean as possible. 
%
%First, we need a \texttt{Vector} struct to store the position, velocity and acceleration of each body and is defined in the \texttt{vector2D.h} file. Note the operator overloading, which allows us to perform some operations between vectors.
%\\
%\begin{lstlisting}[style=cppStyle, caption={Implementation of the \texttt{vector2D.h} struct}, label={Vector.h}]
%#pragma once
%
%struct Vec2D {
%    float x, y;
%
%    // Constructor to initialise the vector
%    Vec2D(float x = 0, float y = 0);
%
%    // Operator overloading
%    Vec2D operator+(const Vec2D& other) const;
%    Vec2D operator*(float scalar) const;
%    Vec2D operator-(const Vec2D& other) const;
%    Vec2D operator += (const Vec2D& other);
%    Vec2D operator -= (const Vec2D& other);
%    Vec2D operator *= (float scalar);
%    bool operator == (const Vec2D& other) const;
%    Vec2D operator /= (float scalar);
%    Vec2D operator/(float scalar) const;
%
%    float magSqr() const;
%
%    // Static function zero-vector
%    static Vec2D zero();
%};
%\end{lstlisting}
%
%Additionally, we implemented a \texttt{Body} struct, that utilises the \texttt{Vec2D} struct to store the position, velocity and acceleration of one body. Likewise, it stores the mass and radius of the body. 
%The \texttt{Body} struct is defined in the \texttt{Body.h} file. It stores the aforementioned information, and also includes a \texttt{Constructor} method to initialise the body and an \texttt{update} method, which calls an integrator and updates the position and velocity of the body.
%\\
%\begin{lstlisting}[style=cppStyle, caption={Implementation of the \texttt{Body.h} struct}, label={Body.h}]
%#pragma once
%
%#include "vector2D.h"
%
%// Body struct
%struct Body {
%    Vec2D pos, vel, acc, prevPos;
%    float mass, radius;
%    // Constructor to initialize the body
%    Body(const Vec2D& pos, const Vec2D& vel,
%         float mass, float r);
%
%    // Update function
%    void update(float dt,
%         void (*integrator)(Body&, float));
%};
%\end{lstlisting}
%
%Finally, we have the \texttt{computeForces} method, which computes the forces acting on each body, and updates the acceleration prior to 
%the integration step. 
%
%\begin{lstlisting}[style=cppStyle, caption={Implementation of the \texttt{computeForces} method}, label={computeForces}]
%void BruteForceSimulator::computeForces() {
%    const float G = 1.0f;
%    const float MIN = 0.03f;
%
%    for (size_t i = 0; i < bodies.size(); ++i) {
%        for (size_t j = i + 1; j < bodies.size(); ++j) {
%
%            Vec2D r = bodies[j].pos - bodies[i].pos;
%
%            float magSqr = r.magSqr(); 
%            float mag = std::sqrt(magSqr);
%            Vec2D temp = r / std::pow(magSqr + (MIN * MIN), 1.5);
%            bodies[i].acc += temp * bodies[j].mass;
%            bodies[j].acc -= temp * bodies[i].mass;
%        }
%    }
%}
%\end{lstlisting}}



%\section{The Barnes-Hut Algorithm}\label{sec:bh_algorithm}
%Before you begin to format your paper, first write and save the content as a 
%separate text file. Complete all content and organizational editing before 
%formatting. Please note sections  below for more information on 
%proofreading, spelling and grammar.

%Keep your text and graphic files separate until after the text has been 
%formatted and styled. Do not number text heads---{\LaTeX} will do that 
% for you.

%\subsection{Quad Three construction}
%Define abbreviations and acronyms the first time they are used in the text, 
%even after they have been defined in the abstract. Abbreviations such as 
%IEEE, SI, MKS, CGS, ac, dc, and rms do not have to be defined. Do not use 
%abbreviations in the title or heads unless they are unavoidable.

%\subsection{Center of Mass Approximation} 
%Centre of mass

%\subsection{Theta ($\theta$) Criterion}
%Criteria

%\section{Implementation Details}\label{sec:implementation}
%Hello 

%\section{Results and Analysis}\label{sec:results}
%Hola

\section{Preliminary results}\label{sec:results}
Even though the logic of the direct method is quite straightforward, the graphics rendering need to be optimised so the overall performance is improved. In this section we included some images of the preliminary results of the brute force method. The simulation was run with 1000 bodies, and the time step was set to 0.0001 seconds. The simulation was run for 1000 steps, and the results are shown in Figure \ref{fig:sim1-dm}.
\begin{figure}[h]
  \centering
  \includegraphics[width=0.5\textwidth]{./sim-init.jpg}
  \caption{Initial state of a system of 1000 particles.}
  \label{fig:sim1-dm}
\end{figure}

\begin{figure}[h]
  \centering 
  \includegraphics[width=0.5\textwidth]{./sim1-final.jpg}
  \caption{Final state of a system of 1000 particles.}
  \label{fig:sim2-dm}
\end{figure}




\bibliographystyle{IEEEtran}
\bibliography{bibliography}




\end{document}
